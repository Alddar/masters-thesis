// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "./generated/client"
}

generator zod {
  provider         = "zod-prisma-types"
  createInputTypes = false
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Image {
  id              String         @id @default(cuid())
  fileName        String
  template        Template?
  meme            Meme?
  templateImage   TemplateImage?
}

model TemplateText {
  id          String   @id @default(cuid())
  templateId  String
  template    Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  x           Float
  y           Float
  fontSize    Float
  color       String
  strokeColor String
  width       Float
  height      Float
  text        String
  scale       Float
  rotation    Float
  zIndex      Int
}

model TemplateImage {
  id         String   @id @default(cuid())
  templateId String
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  x          Float
  y          Float
  width      Float
  height     Float
  scale      Float
  rotation   Float
  image      Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId    String   @unique
  zIndex     Int
}

model Template {
  id       String          @id @default(cuid())
  texts    TemplateText[]
  images   TemplateImage[]
  name     String
  isPublic Boolean
  imageId  String          @unique
  image    Image           @relation(fields: [imageId], references: [id], onDelete: Cascade)
  userId   String
  user     User            @relation(fields: [userId], references: [id])
}

model Meme {
  id      String @id @default(cuid())
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  imageId String @unique
  image   Image  @relation(fields: [imageId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  memeTemplates Template[]
  memes         Meme[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
